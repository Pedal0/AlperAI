#!/usr/bin/env python3
"""
Test final de v√©rification que le probl√®me des marqueurs markdown est compl√®tement r√©solu.
Simule un sc√©nario r√©el avec g√©n√©ration + corrections automatiques + nettoyages.
"""
import tempfile
import os
import sys
import logging
from pathlib import Path

# Ajouter le r√©pertoire parent au chemin Python
sys.path.insert(0, os.path.abspath('.'))

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

def test_real_world_scenario():
    """
    Test complet qui simule le sc√©nario r√©el d'utilisation.
    """
    print("üöÄ Test du sc√©nario r√©el complet")
    print("=" * 50)
    
    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"üìÅ Test dans: {temp_dir}")
        
        try:
            from src.utils.file_utils import parse_and_write_code, clean_code_block
            from src.mcp.simple_validation_system import clean_markdown_artifacts, apply_simple_fixes
        except ImportError as e:
            print(f"‚ùå Erreur d'import: {e}")
            return False
        
        # SC√âNARIO 1: Code g√©n√©r√© par l'IA avec des marqueurs markdown
        print("\nüìù SC√âNARIO 1: Code g√©n√©r√© avec marqueurs markdown")
        
        ai_generated_response = """--- FILE: app.js ---
```javascript
const express = require('express');
const app = express();

app.get('/', (req, res) => {
    res.send('Hello World!');
});

app.listen(3000, () => {
    console.log('Server running on port 3000');
});
```

--- FILE: package.json ---
```json
{
  "name": "my-app",
  "version": "1.0.0",
  "main": "app.js",
  "dependencies": {
    "express": "^4.18.0"
  }
}
```

--- FILE: styles.css ---
```css
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
}
```"""
        
        # √âtape 1: Parser et √©crire les fichiers (comme dans generation_flow.py)
        files_written, errors, incomplete = parse_and_write_code(temp_dir, ai_generated_response)
        
        print(f"‚úÖ {len(files_written)} fichiers √©crits")
        
        # V√©rifier si des marqueurs persistent apr√®s parse_and_write_code
        markdown_detected = False
        for file_path in files_written:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            if content.startswith('```') or content.endswith('```'):
                markdown_detected = True
                print(f"‚ö†Ô∏è  Marqueurs d√©tect√©s dans {Path(file_path).name}")
        
        if not markdown_detected:
            print("‚úÖ G√©n√©ration initiale: Aucun marqueur markdown restant")
        
        # √âtape 2: Nettoyage post-g√©n√©ration (comme dans generation_flow.py ligne ~334)
        print("\nüßπ √âTAPE 2: Nettoyage post-g√©n√©ration")
        cleanup_count = clean_markdown_artifacts(temp_dir)
        print(f"‚úÖ {cleanup_count} fichiers nettoy√©s apr√®s g√©n√©ration")
        
        # SC√âNARIO 2: IA fait des corrections et r√©introduit des marqueurs
        print("\nüîß SC√âNARIO 2: IA fait des corrections (r√©introduit des marqueurs)")
        
        # Simuler une r√©ponse de correction de l'IA avec marqueurs
        ai_correction_response = """üîß APPLY_FIXES
=== FIX_FILE: app.js ===
```javascript
const express = require('express');
const app = express();

// Ajout: middleware pour parsing JSON
app.use(express.json());

app.get('/', (req, res) => {
    res.send('Hello World!');
});

// Correction: utiliser PORT depuis env
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
```
=== END_FIX ===

=== FIX_FILE: package.json ===
```json
{
  "name": "my-app",
  "version": "1.0.0",
  "main": "app.js",
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {
    "express": "^4.18.0"
  }
}
```
=== END_FIX ==="""
        
        # Appliquer les corrections (avec nettoyage automatique int√©gr√©)
        fixes_applied = apply_simple_fixes(temp_dir, ai_correction_response)
        print(f"‚úÖ {fixes_applied} corrections appliqu√©es")
        
        # V√âRIFICATION FINALE: S'assurer qu'aucun marqueur ne persiste
        print("\nüîç V√âRIFICATION FINALE")
        
        final_check_success = True
        corrected_content_preserved = True
        
        for file_path in Path(temp_dir).rglob('*'):
            if file_path.is_file() and file_path.suffix in ['.js', '.json', '.css', '.py', '.html']:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # V√©rifier l'absence de marqueurs markdown
                if content.startswith('```') or content.endswith('```') or '```' in content:
                    print(f"‚ùå Marqueurs markdown persistants dans {file_path.name}")
                    print(f"   D√©but: {content[:100]}...")
                    final_check_success = False
                else:
                    print(f"‚úÖ {file_path.name}: Propre")
                
                # V√©rifier que les corrections sont pr√©serv√©es
                if file_path.name == 'app.js':
                    if 'process.env.PORT' in content and 'express.json()' in content:
                        print(f"   ‚úì Corrections pr√©serv√©es dans {file_path.name}")
                    else:
                        corrected_content_preserved = False
                        print(f"   ‚ö†Ô∏è  Corrections perdues dans {file_path.name}")
        
        # R√âSULTAT FINAL
        print(f"\nüéØ R√âSULTAT FINAL:")
        
        if final_check_success and corrected_content_preserved:
            print("üöÄ SUCC√àS COMPLET!")
            print("‚úÖ Aucun marqueur markdown ne persiste")
            print("‚úÖ Toutes les corrections sont pr√©serv√©es")
            print("‚úÖ Le syst√®me de nettoyage fonctionne parfaitement")
            print("")
            print("üéâ PROBL√àME R√âSOLU: Les marqueurs markdown seront automatiquement")
            print("   supprim√©s apr√®s CHAQUE phase de correction de l'IA!")
            return True
        else:
            print("‚ùå √âCHEC:")
            if not final_check_success:
                print("   ‚Ä¢ Des marqueurs markdown persistent")
            if not corrected_content_preserved:
                print("   ‚Ä¢ Des corrections ont √©t√© perdues")
            return False

if __name__ == "__main__":
    success = test_real_world_scenario()
    exit(0 if success else 1)
