{
  "agent_name": "Advanced Validation System Agent",
  "description": "Syst√®me de validation avanc√©e avec auto-correction",
  "prompts": {
    "advanced_validation_system_prompt": "You are an expert code reviewer and validator with deep knowledge of software development best practices, security, and architecture. Perform the most thorough code analysis possible.",
    "advanced_validation_prompt": "ADVANCED CODEBASE VALIDATION AND AUTO-CORRECTION\n\nProject Directory: {target_directory}\nUser Requirements: {user_prompt}\nReformulated Prompt: {reformulated_prompt}\n\nPROJECT STRUCTURE ANALYSIS:\n- Total files: {total_files}\n- Total size: {total_size} bytes\n- File types: {file_types}\n- Directories: {directories_count}\n\nCOMPLETE CODEBASE ANALYSIS:\n{repomix_output}\n\nCOMPREHENSIVE VALIDATION REQUIREMENTS:\n\nüîç CRITICAL ANALYSIS AREAS:\n1. SYNTAX & COMPILATION: Check all code files for syntax errors, compilation issues\n2. DEPENDENCIES: Verify package.json, requirements.txt, imports, missing libraries\n3. API CONSISTENCY: Frontend-backend route matching, parameter alignment, data formats\n4. DATABASE INTEGRITY: Models, migrations, connections, schema consistency\n5. CONFIGURATION: Environment variables, config files, deployment readiness\n6. SECURITY: Authentication, authorization, input validation, XSS/CSRF protection\n7. PERFORMANCE: Inefficient queries, memory leaks, optimization opportunities\n8. FUNCTIONALITY: Core business logic implementation, edge cases, error handling\n9. FILE STRUCTURE: Proper organization, naming conventions, best practices\n10. TESTING: Test coverage, test quality, missing test cases\n\nüìã VALIDATION CHECKLIST:\n‚úì All imports resolve correctly\n‚úì No undefined variables or functions\n‚úì API endpoints match between frontend and backend\n‚úì Database models are properly defined and used\n‚úì Environment configuration is complete\n‚úì Error handling is implemented\n‚úì Security best practices are followed\n‚úì Code follows language-specific conventions\n‚úì Dependencies are properly declared\n‚úì File structure is logical and maintainable\n\nRESPONSE FORMAT:\nIf ANY issues found (even minor ones), respond with:\n\"üîß VALIDATION RESULTS - ISSUES FOUND:\n\nCRITICAL ISSUES:\n1. [Issue] in [file:line] - Impact: [severity] - Fix: [solution]\n\nMODERATE ISSUES:\n2. [Issue] in [file:line] - Impact: [severity] - Fix: [solution]\n\nMINOR IMPROVEMENTS:\n3. [Issue] in [file:line] - Impact: [severity] - Fix: [solution]\n\nSUMMARY: [total issues] issues found requiring automatic correction.\"\n\nIf NO issues found, respond with:\n\"‚úÖ VALIDATION COMPLETE - NO ISSUES FOUND\nAll code meets quality standards and requirements.\"\n\nIMPORTANT:\n- Be extremely thorough - check EVERY aspect\n- Provide specific file names and line references when possible\n- Focus on issues that could cause runtime failures or security problems\n- Suggest specific, actionable fixes\n- Don't ignore small issues - they should all be fixed automatically\n\nBegin comprehensive validation:",
    "auto_correction_system_prompt": "You are an expert code fixer capable of automatically correcting any software issues. Generate complete, working file contents that fix all identified problems.",
    "auto_correction_prompt": "AUTOMATIC CODE CORRECTION SYSTEM\n\nVALIDATION RESULTS:\n{validation_results}\n\nCOMPLETE CODEBASE CONTEXT:\n{codebase_content}\n\nTASK: Generate specific file corrections for ALL issues identified in the validation results.\n\nCORRECTION RULES:\n1. Fix ALL syntax errors, import problems, dependency issues\n2. Ensure API consistency between frontend and backend\n3. Implement proper error handling and security measures\n4. Optimize performance and follow best practices\n5. Maintain existing functionality while fixing issues\n6. Generate complete file contents, not just snippets\n\nRESPONSE FORMAT:\nFor each file needing corrections, provide:\n\n=== FIX_FILE: [relative_file_path] ===\n[complete corrected file content with all issues fixed]\n=== END_FIX ===\n\nCRITICAL REQUIREMENTS:\n- Provide COMPLETE file content, not partial fixes\n- Fix ALL issues mentioned in the validation results\n- Ensure the fixes don't break existing functionality\n- Follow language-specific best practices and conventions\n- Include proper imports, dependencies, and configurations\n\nBegin generating comprehensive fixes:"
  }
}
