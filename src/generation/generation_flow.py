"""
Module de gestion du processus de g√©n√©ration d'applications.
Contient les √©tapes et la logique de g√©n√©ration d'applications.
"""
import time
import asyncio
import json
import streamlit as st
from pathlib import Path

from src.config.constants import RATE_LIMIT_DELAY_SECONDS
from src.utils.model_utils import is_free_model
from src.api.openrouter_api import call_openrouter_api
from src.utils.file_utils import (
    parse_structure_and_prompt, 
    create_project_structure,
    parse_and_write_code,
    identify_empty_files,
    generate_missing_code
)
from src.utils.prompt_utils import prompt_mentions_design
from src.mcp.tool_utils import get_default_tools
from src.mcp.handlers import handle_tool_results
from src.preview.preview_manager import launch_preview_mode

async def run_mcp_query(client, query, context=None):
    """
    Ex√©cute une requ√™te MCP de mani√®re asynchrone.
    
    Args:
        client: Client MCP
        query (str): Requ√™te √† ex√©cuter
        context (str, optional): Contexte suppl√©mentaire
        
    Returns:
        dict: R√©sultat de la requ√™te
    """
    result = await client.process_query(query, context)
    return result

def generate_application(api_key, selected_model, user_prompt, target_directory, use_mcp_tools=True, frontend_framework="Auto-detect", include_animations=True):
    """
    G√©n√®re une application compl√®te bas√©e sur la description de l'utilisateur.
    
    Args:
        api_key (str): Cl√© API OpenRouter
        selected_model (str): Mod√®le d'IA s√©lectionn√©
        user_prompt (str): Description de l'application souhait√©e
        target_directory (str): R√©pertoire de destination
        use_mcp_tools (bool, optional): Utiliser les outils MCP pour am√©liorer la g√©n√©ration
        frontend_framework (str, optional): Framework frontend pr√©f√©r√©
        include_animations (bool, optional): Inclure des animations CSS
        
    Returns:
        bool: True si la g√©n√©ration a r√©ussi, False sinon
    """
    st.session_state.process_running = True  # Emp√™cher le double-clic
    st.session_state.last_code_generation_response = ""  # R√©initialiser l'√©tat
    st.session_state.reformulated_prompt = ""
    st.session_state.project_structure = []
    st.session_state.tool_results = {}
    
    # Initialiser le client MCP si les outils sont activ√©s
    if use_mcp_tools:
        from src.mcp.clients import SimpleMCPClient
        st.session_state.mcp_client = SimpleMCPClient(api_key, selected_model)
        st.info("üîå Outils MCP activ√©s: Recherche web, documentation, et composants frontend disponibles.")

    # == √âTAPE 1: Reformulation et Structure ==
    st.info("‚ñ∂Ô∏è √âtape 1: Reformulation du prompt et d√©finition de la structure...")
    status_placeholder_step1 = st.empty()  # Pour afficher le statut
    with st.spinner("Appel de l'IA pour reformuler et d√©finir la structure..."):
        # V√©rifier la limite de taux pour les mod√®les gratuits
        if is_free_model(selected_model):
            current_time = time.time()
            time_since_last_call = current_time - st.session_state.get('last_api_call_time', 0)
            if time_since_last_call < RATE_LIMIT_DELAY_SECONDS:
                wait_time = RATE_LIMIT_DELAY_SECONDS - time_since_last_call
                status_placeholder_step1.warning(f"‚è≥ Mod√®le gratuit d√©tect√©. Attente de {wait_time:.1f} secondes (limite de taux)...")
                time.sleep(wait_time)

        # Si les outils MCP sont activ√©s, les utiliser pour am√©liorer le prompt
        additional_context = ""
        if use_mcp_tools and st.session_state.mcp_client:
            status_placeholder_step1.info("üîç Utilisation des outils MCP pour analyser votre demande et recueillir des informations...")
            
            # Ajouter les pr√©f√©rences frontend √† la requ√™te d'analyse
            frontend_preferences = ""
            if frontend_framework != "Auto-detect":
                frontend_preferences = f"Pour le frontend, utilisez {frontend_framework}. "
            if include_animations:
                frontend_preferences += "Incluez des animations CSS et des transitions pour rendre l'UI attrayante. "
            
            analysis_query = f"""
            Analysez cette demande de d√©veloppement d'application: "{user_prompt}"
            
            1. Quel type d'application est demand√©?
            2. Quels frameworks ou biblioth√®ques pourraient √™tre n√©cessaires?
            3. Ai-je besoin de rechercher une documentation pour aider √† l'impl√©mentation?
            4. Quels composants frontend seraient utiles pour ce projet?
            5. Quel type de template conviendrait le mieux √† cette application?
            
            {frontend_preferences}
            
            N'utilisez des outils que si n√©cessaire pour clarifier des d√©tails techniques ou trouver des composants sp√©cifiques.
            """
            
            # Ex√©cuter la requ√™te MCP de mani√®re asynchrone
            mcp_result = asyncio.run(run_mcp_query(st.session_state.mcp_client, analysis_query))
            
            if mcp_result and "tool_calls" in mcp_result and mcp_result["tool_calls"]:
                status_placeholder_step1.success("‚úÖ Outils utilis√©s pour recueillir du contexte suppl√©mentaire pour votre projet.")
                
                # Traiter et stocker les r√©sultats des outils
                for tool_call in mcp_result["tool_calls"]:
                    tool_name = tool_call.get("tool")
                    if tool_name:
                        st.session_state.tool_results[tool_name] = tool_call
                
                # Ajouter ce contexte √† notre prompt
                additional_context = f"""
                Contexte suppl√©mentaire pour g√©n√©rer cette application:
                {mcp_result.get('text', '')}
                """
            
        # Construction du prompt pour la premi√®re √©tape
        prompt_step1 = f"""
        Analysez la demande de l'utilisateur ci-dessous. Vos t√¢ches sont:
        1.  **Reformuler la Demande:** Cr√©ez un prompt d√©taill√© et pr√©cis d√©crivant les fonctionnalit√©s, technologies (supposez des technologies web standard comme Python/Flask ou Node/Express si non sp√©cifi√©, ou utilisez HTML/CSS/JS si simple), et exigences. Cela guidera la g√©n√©ration de code. Incluez des commentaires dans le code g√©n√©r√©.
        2.  **D√©finir la Structure du Projet:** Proposez une structure compl√®te et logique de fichiers/r√©pertoires. Listez chaque √©l√©ment sur une nouvelle ligne. Utilisez des chemins relatifs. Marquez les r√©pertoires avec un '/' final. N'incluez PAS de commentaires (#) ou de backticks (```) dans la liste de structure elle-m√™me.

        Demande de l'Utilisateur:
        "{user_prompt}"
        
        {additional_context if additional_context else ""}

        Le format de sortie DOIT √™tre exactement comme suit, en commen√ßant imm√©diatement par le premier marqueur:

        ### REFORMULATED PROMPT ###
        [Prompt reformul√© d√©taill√© ici]

        ### STRUCTURE ###
        [Liste des fichiers/dossiers, un par ligne, ex.:
        src/
        src/main.py
        requirements.txt
        README.md]
        """
        messages_step1 = [{"role": "user", "content": prompt_step1}]

        response_step1 = call_openrouter_api(api_key, selected_model, messages_step1, temperature=0.6, max_retries=2)
        st.session_state.last_api_call_time = time.time()  # Enregistrer l'heure

    if response_step1 and response_step1.get("choices"):
        response_text_step1 = response_step1["choices"][0]["message"]["content"]
        reformulated_prompt, structure_lines = parse_structure_and_prompt(response_text_step1)

        if reformulated_prompt and structure_lines:
            st.session_state.reformulated_prompt = reformulated_prompt
            st.session_state.project_structure = structure_lines
            status_placeholder_step1.success("‚úÖ √âtape 1 termin√©e: Prompt reformul√© et structure d√©finie.")

            with st.expander("Voir le Prompt Reformul√© et la Structure"):
                st.subheader("Prompt Reformul√©:")
                st.markdown(f"```text\n{reformulated_prompt}\n```")
                st.subheader("Structure de Projet Propos√©e (Nettoy√©e):")
                st.code("\n".join(structure_lines), language='text')

            # == √âTAPE 2: Cr√©ation de la Structure de Fichiers/Dossiers ==
            st.info("‚ñ∂Ô∏è √âtape 2: Cr√©ation de la Structure Physique...")
            status_placeholder_step2 = st.empty()
            with st.spinner(f"Cr√©ation des dossiers et fichiers dans '{target_directory}'..."):
                created_paths = create_project_structure(target_directory, st.session_state.project_structure)

            if created_paths is not None:
                status_placeholder_step2.success(f"‚úÖ √âtape 2 termin√©e: Structure cr√©√©e dans '{target_directory}'.")

                # == √âTAPE 3: G√©n√©ration de Code ==
                st.info("‚ñ∂Ô∏è √âtape 3: G√©n√©ration du Code Complet...")
                status_placeholder_step3 = st.empty()
                with st.spinner("Appel de l'IA pour g√©n√©rer le code (cela peut prendre du temps)..."):
                    # V√©rifier la limite de taux pour les mod√®les gratuits
                    if is_free_model(selected_model):
                       current_time = time.time()
                       time_since_last_call = current_time - st.session_state.get('last_api_call_time', 0)
                       if time_since_last_call < RATE_LIMIT_DELAY_SECONDS:
                           wait_time = RATE_LIMIT_DELAY_SECONDS - time_since_last_call
                           status_placeholder_step3.warning(f"‚è≥ Mod√®le gratuit d√©tect√©. Attente de {wait_time:.1f} secondes (limite de taux)...")
                           time.sleep(wait_time)

                    # --- Ajout d'instructions d'animation ---
                    animation_instruction = ""
                    if not prompt_mentions_design(user_prompt):
                         animation_instruction = (
                             "\n7. **Animation & Fluidit√©:** Puisqu'aucun design sp√©cifique n'a √©t√© demand√©, "
                             "veuillez incorporer des animations CSS subtiles et des transitions (par exemple, effets hover, chargement/transitions fluides des sections, retour d'information subtil des boutons) "
                             "pour rendre l'interface utilisateur moderne, fluide et attrayante. Privil√©giez l'utilisabilit√© et √©vitez les animations trop distrayantes."
                         )
                         st.info("‚ÑπÔ∏è Aucune instruction de design d√©tect√©e, ajout d'une demande d'animations fluides.")
                    
                    # Ajouter les r√©sultats des outils si disponibles
                    tool_results_text = ""
                    if use_mcp_tools and st.session_state.tool_results:
                        tool_results_text = "\n**R√©sultats des Outils:** Les informations suivantes ont √©t√© recueillies pour aider au d√©veloppement:\n"
                        for tool_name, tool_info in st.session_state.tool_results.items():
                            st.write(f"**{tool_name}**")
                            st.write(f"Arguments: {tool_info.get('args', {})}")
                            if 'result' in tool_info:
                                with st.expander(f"Voir les r√©sultats de {tool_name}"):
                                    st.code(tool_info['result'])
                    
                    # Construction du prompt pour la g√©n√©ration de code avec les r√©sultats des outils MCP
                    prompt_step2 = f"""
                    G√©n√©rez le code *complet* de l'application bas√© sur le prompt et la structure ci-dessous.

                    **Prompt D√©taill√©:**
                    {st.session_state.reformulated_prompt}
                    
                    {tool_results_text if tool_results_text else ""}

                    **Structure du Projet (uniquement pour r√©f√©rence):**
                    ```
                    {chr(10).join(st.session_state.project_structure)}
                    ```

                    **Instructions:**
                    1. Fournissez le code complet pour *tous* les fichiers list√©s dans la structure.
                    2. Utilisez le format EXACT `--- FILE: chemin/vers/nomfichier ---` sur une ligne par lui-m√™me avant chaque bloc de code de fichier. Commencez la r√©ponse *imm√©diatement* avec le premier marqueur. Aucun texte d'introduction.
                    3. Assurez-vous que le code est fonctionnel, inclut les imports, la gestion des erreurs de base et des commentaires.
                    4. Pour `requirements.txt` ou similaire, listez les d√©pendances.
                    5. Pour `README.md`, fournissez des instructions de configuration/ex√©cution.
                    6. Si le code d√©passe les limites de jetons, terminez la r√©ponse *enti√®re* *exactement* avec: `GENERATION_INCOMPLETE` (aucun autre texte apr√®s).{animation_instruction}

                    G√©n√©rez le code maintenant:
                    """
                    messages_step2 = [{"role": "user", "content": prompt_step2}]

                    # Utiliser des outils pour la g√©n√©ration de code si activ√©s
                    if use_mcp_tools:
                        response_step2 = call_openrouter_api(
                            api_key, 
                            selected_model, 
                            messages_step2, 
                            temperature=0.4, 
                            max_retries=2,
                            tools=get_default_tools()
                        )
                    else:
                        # Utiliser une temp√©rature plus basse pour la g√©n√©ration de code (moins de cr√©ativit√©/erreurs)
                        response_step2 = call_openrouter_api(
                            api_key, 
                            selected_model, 
                            messages_step2, 
                            temperature=0.4, 
                            max_retries=2
                        )
                    st.session_state.last_api_call_time = time.time()

                if response_step2 and response_step2.get("choices"):
                    code_response_text = response_step2["choices"][0]["message"]["content"]
                    
                    # V√©rifier les appels d'outils
                    if use_mcp_tools and response_step2["choices"][0]["message"].get("tool_calls"):
                        status_placeholder_step3.info("üîç L'IA utilise des outils pour am√©liorer la g√©n√©ration de code...")
                        
                        # Traiter chaque appel d'outil
                        tool_calls = response_step2["choices"][0]["message"]["tool_calls"]
                        for tool_call in tool_calls:
                            function_info = tool_call.get("function", {})
                            tool_name = function_info.get("name")
                            tool_args_str = function_info.get("arguments", "{}")
                            
                            try:
                                tool_args = json.loads(tool_args_str)
                                
                                # Ex√©cuter l'outil via le client MCP
                                tool_query = f"Ex√©cuter {tool_name} avec {tool_args}"
                                tool_result = asyncio.run(run_mcp_query(st.session_state.mcp_client, tool_query))
                                
                                if tool_result:
                                    # Stocker les r√©sultats des outils
                                    st.session_state.tool_results[tool_name] = {
                                        "args": tool_args,
                                        "result": tool_result.get("text", "")
                                    }
                                    
                                    # Construire un prompt de suivi avec les r√©sultats de l'outil
                                    processed_result = handle_tool_results(tool_name, tool_result.get("text", ""))
                                    
                                    follow_up_prompt = f"""
                                    J'ai utilis√© {tool_name} pour recueillir des informations suppl√©mentaires pour la g√©n√©ration de code.
                                    
                                    L'outil a retourn√© ces informations:
                                    
                                    {processed_result}
                                    
                                    Veuillez utiliser ces informations suppl√©mentaires pour am√©liorer la g√©n√©ration de code.
                                    Continuez √† g√©n√©rer le code en utilisant le m√™me format:
                                    `--- FILE: chemin/vers/nomfichier ---`
                                    
                                    Et n'oubliez pas d'inclure tous les fichiers de la structure.
                                    """
                                    
                                    # Faire un autre appel API avec le prompt de suivi
                                    follow_up_messages = messages_step2 + [
                                        {"role": "assistant", "content": code_response_text},
                                        {"role": "user", "content": follow_up_prompt}
                                    ]
                                    
                                    status_placeholder_step3.info(f"üîç Utilisation des informations de {tool_name} pour am√©liorer le code...")
                                    
                                    # V√©rifier la limite de taux
                                    if is_free_model(selected_model):
                                        current_time = time.time()
                                        time_since_last_call = time.time() - st.session_state.get('last_api_call_time', 0)
                                        if time_since_last_call < RATE_LIMIT_DELAY_SECONDS:
                                            wait_time = RATE_LIMIT_DELAY_SECONDS - time_since_last_call
                                            st.warning(f"‚è≥ Attente de {wait_time:.1f}s avant de continuer...")
                                            time.sleep(wait_time)
                                    
                                    # Faire l'appel de suivi
                                    follow_up_response = call_openrouter_api(
                                        api_key, 
                                        selected_model, 
                                        follow_up_messages, 
                                        temperature=0.4
                                    )
                                    st.session_state.last_api_call_time = time.time()
                                    
                                    if follow_up_response and follow_up_response.get("choices"):
                                        # Mettre √† jour la r√©ponse de code avec la version am√©lior√©e
                                        enhanced_code = follow_up_response["choices"][0]["message"]["content"]
                                        code_response_text = enhanced_code
                            except Exception as e:
                                st.warning(f"Erreur lors du traitement de l'outil {tool_name}: {e}")
                    
                    st.session_state.last_code_generation_response = code_response_text  # Stocker pour affichage
                    status_placeholder_step3.success("‚úÖ √âtape 3 termin√©e: R√©ponse de g√©n√©ration de code re√ßue.")

                    # == √âTAPE 4: √âcriture du Code dans les Fichiers ==
                    st.info("‚ñ∂Ô∏è √âtape 4: √âcriture du Code dans les Fichiers...")
                    status_placeholder_step4 = st.empty()
                    files_written = []
                    errors = []
                    generation_incomplete = False
                    with st.spinner("Analyse de la r√©ponse et √©criture du code..."):
                        files_written, errors, generation_incomplete = parse_and_write_code(target_directory, code_response_text)

                    if files_written or errors:
                        status_placeholder_step4.success(f"‚úÖ √âtape 4 termin√©e: Traitement de la r√©ponse termin√©.")
                        st.subheader("R√©sultats de l'√©criture de fichiers:")
                        for f in files_written:
                            st.success(f"   üìÑ Fichier √©crit: {Path(f).relative_to(Path(target_directory))}")
                        for err in errors:
                            st.error(f"   ‚ùå {err}")

                        # == √âTAPE 5: V√©rifier les Fichiers Vides et G√©n√©rer le Code Manquant ==
                        empty_files_check = st.checkbox("V√©rifier les fichiers vides et g√©n√©rer leur code", value=True)
                        
                        if empty_files_check and not errors and (files_written or generation_incomplete):
                            st.info("‚ñ∂Ô∏è √âtape 5: V√©rification des fichiers vides et g√©n√©ration du code manquant...")
                            status_placeholder_step5 = st.empty()
                            
                            with st.spinner("Identification des fichiers vides..."):
                                empty_files = identify_empty_files(target_directory, st.session_state.project_structure)
                            
                            if empty_files:
                                status_placeholder_step5.warning(f"Trouv√© {len(empty_files)} fichiers vides qui n√©cessitent une g√©n√©ration de code.")
                                st.write("Fichiers vides:")
                                for ef in empty_files:
                                    st.info(f"   üìÑ Fichier vide: {ef}")
                                
                                # V√©rifier la limite de taux avant d'appeler l'API √† nouveau
                                if is_free_model(selected_model):
                                    current_time = time.time()
                                    time_since_last_call = time.time() - st.session_state.get('last_api_call_time', 0)
                                    if time_since_last_call < RATE_LIMIT_DELAY_SECONDS:
                                        wait_time = RATE_LIMIT_DELAY_SECONDS - time_since_last_call
                                        st.warning(f"‚è≥ Mod√®le gratuit d√©tect√©. Attente de {wait_time:.1f} secondes avant de g√©n√©rer le code manquant...")
                                        time.sleep(wait_time)
                                
                                with st.spinner("G√©n√©ration de code pour les fichiers vides..."):
                                    additional_files, additional_errors = generate_missing_code(
                                        api_key, 
                                        selected_model, 
                                        empty_files, 
                                        st.session_state.reformulated_prompt, 
                                        st.session_state.project_structure,
                                        st.session_state.last_code_generation_response,
                                        target_directory
                                    )
                                    st.session_state.last_api_call_time = time.time()
                                
                                if additional_files:
                                    status_placeholder_step5.success(f"‚úÖ G√©n√©ration r√©ussie de code pour {len(additional_files)} fichiers vides.")
                                    st.subheader("Fichiers suppl√©mentaires remplis:")
                                    for f in additional_files:
                                        st.success(f"   üìÑ Fichier rempli: {Path(f).relative_to(Path(target_directory))}")
                                    
                                    # Ajouter √† la liste principale de fichiers
                                    files_written.extend(additional_files)
                                
                                if additional_errors:
                                    for err in additional_errors:
                                        st.error(f"   ‚ùå {err}")
                                    
                                    # Ajouter √† la liste principale d'erreurs
                                    errors.extend(additional_errors)
                            else:
                                status_placeholder_step5.success("‚úÖ Aucun fichier vide trouv√© - tous les fichiers contiennent du code.")
                        
                        # Afficher les r√©sultats des outils si des outils ont √©t√© utilis√©s
                        if use_mcp_tools and st.session_state.tool_results:
                            with st.expander("Voir les R√©sultats des Outils MCP"):
                                st.subheader("üîç R√©sultats des Outils Utilis√©s")
                                for tool_name, tool_info in st.session_state.tool_results.items():
                                    st.write(f"**{tool_name}**")
                                    st.write(f"Arguments: {tool_info.get('args', {})}")
                                    if 'result' in tool_info:
                                        with st.expander(f"Voir les r√©sultats de {tool_name}"):
                                            st.code(tool_info['result'])
                        
                        # Message de succ√®s final
                        if not errors:
                            st.success("üéâ Application g√©n√©r√©e avec succ√®s!")
                            st.balloons()
                            
                            # Sauvegarder le chemin pour le mode pr√©visualisation
                            st.session_state.last_generated_app_path = target_directory
                            
                            # Ajouter le bouton de pr√©visualisation
                            preview_col1, preview_col2 = st.columns([3, 1])
                            with preview_col1:
                                st.info("Voulez-vous pr√©visualiser l'application g√©n√©r√©e directement dans l'interface?")
                            with preview_col2:
                                if st.button("üîç Pr√©visualiser l'application", type="primary"):
                                    # D√©finir les √©tats de session pour la pr√©visualisation
                                    launch_preview_mode(target_directory)
                                    # Force le rechargement complet de l'application
                                    st.experimental_rerun()
                            return True
                        elif len(errors) < len(files_written) / 2:  # Si les erreurs sont inf√©rieures √† la moiti√© des fichiers
                            st.warning("üéØ Application g√©n√©r√©e avec quelques erreurs. V√©rifiez les messages d'erreur ci-dessus.")
                            
                            # Proposer quand m√™me la pr√©visualisation mais avec un avertissement
                            st.session_state.last_generated_app_path = target_directory
                            preview_col1, preview_col2 = st.columns([3, 1])
                            with preview_col1:
                                st.warning("L'application a √©t√© g√©n√©r√©e avec des erreurs. La pr√©visualisation pourrait ne pas fonctionner correctement.")
                            with preview_col2:
                                if st.button("üîç Tenter la pr√©visualisation", type="primary"):
                                    # D√©finir les √©tats de session pour la pr√©visualisation
                                    launch_preview_mode(target_directory)
                                    # Force le rechargement complet de l'application
                                    st.experimental_rerun()
                            return True
                        else:
                            st.error("‚ùóÔ∏è Plusieurs erreurs se sont produites pendant la g√©n√©ration de l'application.")
                            return False

                    else:
                         status_placeholder_step4.error("‚ùå √âtape 4 √©chou√©e: Aucun fichier n'a pu √™tre √©crit.")
                         return False

                else:
                    status_placeholder_step3.error("‚ùå √âtape 3 √©chou√©e: √âchec de la r√©cup√©ration de la g√©n√©ration de code.")
                    if response_step2: st.json(response_step2)  # Afficher la r√©ponse d'erreur si disponible
                    return False

            else:  # Erreur lors de la cr√©ation de la structure (g√©r√©e dans la fonction)
               status_placeholder_step2.error("‚ùå √âtape 2 √©chou√©e: Impossible de cr√©er la structure du projet.")
               return False

        else:  # Erreur lors de l'analyse de l'√©tape 1
            status_placeholder_step1.error("‚ùå √âtape 1 √©chou√©e: Impossible d'analyser la r√©ponse de l'IA (prompt/structure).")
            if 'response_text_step1' in locals():
                with st.expander("Voir la r√©ponse brute de l'√âtape 1"):
                    st.code(response_text_step1, language='text')
            return False
    else:  # Erreur lors de l'appel API √† l'√©tape 1
         status_placeholder_step1.error("‚ùå √âtape 1 √©chou√©e: √âchec de l'appel API pour la reformulation/structure.")
         if response_step1: st.json(response_step1)  # Afficher la r√©ponse d'erreur si disponible
         return False

    st.session_state.process_running = False  # R√©activer le bouton
    st.info("üèÅ Processus termin√©.")  # Indiquer la fin globale
    return True