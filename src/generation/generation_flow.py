"""
Module de gestion du processus de g√©n√©ration d'applications.
Contient les √©tapes et la logique de g√©n√©ration d'applications.
"""
import time
import asyncio
import json
import logging
from pathlib import Path
from flask import session

from src.config.constants import RATE_LIMIT_DELAY_SECONDS
from src.utils.model_utils import is_free_model
from src.api.openrouter_api import call_openrouter_api
from src.utils.file_utils import (
    parse_structure_and_prompt, 
    create_project_structure,
    parse_and_write_code,
    identify_empty_files,
    generate_missing_code
)
from src.utils.prompt_utils import (
    prompt_mentions_design,
    extract_urls_from_prompt,
    process_urls
)
from src.mcp.tool_utils import get_default_tools
from src.mcp.handlers import handle_tool_results

async def run_mcp_query(client, query, context=None):
    """
    Ex√©cute une requ√™te MCP de mani√®re asynchrone.
    
    Args:
        client: Client MCP
        query (str): Requ√™te √† ex√©cuter
        context (str, optional): Contexte suppl√©mentaire
        
    Returns:
        dict: R√©sultat de la requ√™te
    """
    result = await client.process_query(query, context)
    return result

def generate_application(api_key, selected_model, user_prompt, target_directory, use_mcp_tools=True, frontend_framework="Auto-detect", include_animations=True, progress_callback=None):
    """
    G√©n√®re une application compl√®te bas√©e sur la description de l'utilisateur.
    
    Args:
        api_key (str): Cl√© API OpenRouter
        selected_model (str): Mod√®le d'IA s√©lectionn√©
        user_prompt (str): Description de l'application souhait√©e
        target_directory (str): R√©pertoire de destination
        use_mcp_tools (bool, optional): Utiliser les outils MCP pour am√©liorer la g√©n√©ration
        frontend_framework (str, optional): Framework frontend pr√©f√©r√©
        include_animations (bool, optional): Inclure des animations CSS
        progress_callback (function, optional): Fonction pour mettre √† jour la progression
        
    Returns:
        bool: True si la g√©n√©ration a r√©ussi, False sinon
    """
    from flask import current_app
    import re  # Import d√©plac√© ici
    
    # Variables locales au lieu d'utiliser la session Flask
    process_state = {
        'process_running': True,
        'last_code_generation_response': "",
        'reformulated_prompt': "",
        'project_structure': [],
        'tool_results': {},
        'url_contents': {},
        'last_api_call_time': 0,
    }
    
    # Fonction pour mettre √† jour la progression
    def update_progress(step, message, progress=None):
        if progress_callback:
            progress_callback(step, message, progress)
        logging.info(f"[√âtape {step}] {message}")
    
    # Initialiser le client MCP si les outils sont activ√©s
    mcp_client = None
    if use_mcp_tools:
        from src.mcp.clients import SimpleMCPClient
        mcp_client = SimpleMCPClient(api_key, selected_model)
        update_progress(0, "üîå Outils MCP activ√©s: Recherche web, documentation, et composants frontend disponibles.")

    # == √âTAPE 0: Extraction et traitement des URLs du prompt ==`
    update_progress(0, "Extraction des URLs du prompt...", 5)
    urls = extract_urls_from_prompt(user_prompt)
    url_context = ""
    
    if urls:
        update_progress(0, f"üîó URLs d√©tect√©es dans votre demande: {len(urls)} URL(s)", 10)
        try:
            url_contents = asyncio.run(process_urls(urls))
            process_state['url_contents'] = url_contents
            
            # Pr√©parer le contexte des URLs
            url_context = "\n\n### CONTENU DES URLS FOURNIES ###\n"
            for url, content in url_contents.items():
                truncated_content = content[:5000] + "..." if len(content) > 5000 else content
                url_context += f"\nURL: {url}\n```\n{truncated_content}\n```\n"
            
            update_progress(0, f"‚úÖ Contenu r√©cup√©r√© pour {len(url_contents)} URL(s)", 15)
        except Exception as e:
            update_progress(0, f"‚ùå Erreur lors de la r√©cup√©ration des URLs: {e}", 15)
            # Continuer m√™me en cas d'erreur

    # == √âTAPE 1: Reformulation du prompt ==`
    update_progress(1, "Reformulation du prompt...", 20)
    
    # V√©rifier la limite de taux pour les mod√®les gratuits
    if is_free_model(selected_model):
        current_time = time.time()
        last_api_call_time = process_state.get('last_api_call_time', 0)
        time_since_last_call = current_time - last_api_call_time
        if time_since_last_call < RATE_LIMIT_DELAY_SECONDS:
            wait_time = RATE_LIMIT_DELAY_SECONDS - time_since_last_call
            update_progress(1, f"‚è≥ Mod√®le gratuit d√©tect√©. Attente de {wait_time:.1f} secondes (limite de taux)...", 20)
            time.sleep(wait_time)

    # Si les outils MCP sont activ√©s, les utiliser pour am√©liorer le prompt
    additional_context = ""
    if use_mcp_tools and mcp_client:
        update_progress(1, "üîç Utilisation des outils MCP pour analyser votre demande et recueillir des informations...", 25)
        
        # Ajouter les pr√©f√©rences frontend √† la requ√™te d'analyse
        frontend_preferences = ""
        if frontend_framework != "Auto-detect":
            frontend_preferences = f"Pour le frontend, utilisez {frontend_framework}. "
        if include_animations:
            frontend_preferences += "Incluez des animations CSS et des transitions pour rendre l'UI attrayante. "
        
        analysis_query = f"""
        Analysez cette demande de d√©veloppement d'application: "{user_prompt}"
        
        1. Quel type d'application est demand√©?
        2. Quels frameworks ou biblioth√®ques pourraient √™tre n√©cessaires?
        3. Ai-je besoin de rechercher une documentation pour aider √† l'impl√©mentation?
        4. Quels composants frontend seraient utiles pour ce projet?
        5. Quel type de template conviendrait le mieux √† cette application?
        
        {frontend_preferences}
        
        N'utilisez des outils que si n√©cessaire pour clarifier des d√©tails techniques ou trouver des composants sp√©cifiques.
        """
        
        # Ex√©cuter la requ√™te MCP de mani√®re asynchrone
        mcp_result = asyncio.run(run_mcp_query(mcp_client, analysis_query))
        
        if mcp_result and "tool_calls" in mcp_result and mcp_result["tool_calls"]:
            update_progress(1, "‚úÖ Outils utilis√©s pour recueillir du contexte suppl√©mentaire pour votre projet.", 30)
            
            # Traiter et stocker les r√©sultats des outils
            tool_results = {}
            for tool_call in mcp_result["tool_calls"]:
                tool_name = tool_call.get("tool")
                if tool_name:
                    tool_results[tool_name] = tool_call
            
            process_state['tool_results'] = tool_results
            
            # Ajouter ce contexte √† notre prompt
            additional_context = f"""
            Contexte suppl√©mentaire pour g√©n√©rer cette application:
            {mcp_result.get('text', '')}
            """
    else:
        # Si les outils MCP sont d√©sactiv√©s, informer clairement l'utilisateur
        if not use_mcp_tools:
            update_progress(1, "‚ÑπÔ∏è Outils MCP d√©sactiv√©s: G√©n√©ration basique sans outils d'assistance.", 25)

    # Construction du prompt pour la reformulation uniquement
    prompt_reformulation = f"""
    Analysez la demande de l'utilisateur ci-dessous. Votre t√¢che est de:
    
    **Reformuler la Demande:** Cr√©ez un prompt d√©taill√© et pr√©cis d√©crivant les fonctionnalit√©s, technologies (supposez des technologies web standard comme Python/Flask ou Node/Express si non sp√©cifi√©, ou utilisez HTML/CSS/JS si simple), et exigences. Cela guidera la g√©n√©ration de code. Incluez des commentaires dans le code g√©n√©r√©.

    Demande de l'Utilisateur:
    "{user_prompt}"
    
    {url_context if url_context else ""}
    
    {additional_context if additional_context else ""}

    IMPORTANT: Si l'utilisateur a fourni des URLs, lisez attentivement leur contenu et suivez les instructions ou inspirez-vous des exemples qui y sont pr√©sents.

    IMPORTANT:Le format de sortie DOIT √™tre EXACTEMENT comme suit:

    ### REFORMULATED PROMPT ###
    [Prompt reformul√© d√©taill√© ici]
    """
    messages_reformulation = [{"role": "user", "content": prompt_reformulation}]

    response_reformulation = call_openrouter_api(api_key, selected_model, messages_reformulation, temperature=0.6, max_retries=2)
    process_state['last_api_call_time'] = time.time()
    
    update_progress(1, "Analyse de la r√©ponse de reformulation...", 35)
    
    reformulated_prompt = None
    if response_reformulation and response_reformulation.get("choices"):
        response_text = response_reformulation["choices"][0]["message"]["content"]
        
        # Extraire le prompt reformul√©
        prompt_match = re.search(r"###\s*REFORMULATED PROMPT\s*###\s*(.*)", response_text, re.DOTALL | re.IGNORECASE)
        if prompt_match:
            reformulated_prompt = prompt_match.group(1).strip()
            process_state['reformulated_prompt'] = reformulated_prompt
            # Stocker aussi dans app.config pour que app.py puisse le r√©cup√©rer
            if current_app:
                current_app.config['reformulated_prompt'] = reformulated_prompt
            update_progress(1, "‚úÖ Prompt reformul√© avec succ√®s.", 40)
        else:
            update_progress(1, "‚ö†Ô∏è Format de r√©ponse inattendu pour la reformulation.", 40)
            # Utiliser la r√©ponse compl√®te comme fallback
            reformulated_prompt = response_text.strip()
            process_state['reformulated_prompt'] = reformulated_prompt
            if current_app:
                current_app.config['reformulated_prompt'] = reformulated_prompt
    else:
        update_progress(1, "‚ùå √âchec de la reformulation du prompt.", 40)
        return False

    # == √âTAPE 2: D√©finition de la structure ==`
    update_progress(2, "D√©finition de la structure du projet...", 45)
    
    # V√©rifier la limite de taux pour les mod√®les gratuits
    if is_free_model(selected_model):
        current_time = time.time()
        last_api_call_time = process_state.get('last_api_call_time', 0)
        time_since_last_call = current_time - last_api_call_time
        if time_since_last_call < RATE_LIMIT_DELAY_SECONDS:
            wait_time = RATE_LIMIT_DELAY_SECONDS - time_since_last_call
            update_progress(2, f"‚è≥ Mod√®le gratuit d√©tect√©. Attente de {wait_time:.1f} secondes (limite de taux)...", 45)
            time.sleep(wait_time)
    
    # Construction du prompt pour la structure uniquement
    prompt_structure = f"""
    Bas√© sur le prompt reformul√© ci-dessous, votre t√¢che est de:
    
    **D√©finir la Structure du Projet:** Proposez une structure compl√®te et logique de fichiers/r√©pertoires pour cette application. Listez chaque √©l√©ment sur une nouvelle ligne. Utilisez des chemins relatifs. Marquez les r√©pertoires avec un '/' final. N'incluez PAS de commentaires (#) ou de backticks (```) dans la liste de structure elle-m√™me.

    Prompt reformul√©:
    {reformulated_prompt}
    
    {url_context if url_context else ""}

    IMPORTANT: Si l'utilisateur a fourni des URLs, inspirez-vous des exemples ou de la structure qui y sont pr√©sents.

    Le format de sortie DOIT √™tre exactement comme suit:

    ### STRUCTURE ###
    [Liste des fichiers/dossiers, un par ligne, ex.:
    src/
    src/main.py
    requirements.txt
    README.md]
    """
    messages_structure = [{"role": "user", "content": prompt_structure}]

    response_structure = call_openrouter_api(api_key, selected_model, messages_structure, temperature=0.6, max_retries=2)
    process_state['last_api_call_time'] = time.time()
    
    update_progress(2, "Analyse de la r√©ponse de structure...", 50)
    
    structure_lines = []
    if response_structure and response_structure.get("choices"):
        response_text = response_structure["choices"][0]["message"]["content"]
        
        # Extraire la structure
        structure_match = re.search(r"###\s*STRUCTURE\s*###\s*(.*)", response_text, re.DOTALL | re.IGNORECASE)
        if structure_match:
            structure_block = structure_match.group(1).strip()
            # Nettoyage de la structure
            structure_block_cleaned = structure_block.strip().strip('`')
            potential_lines = structure_block_cleaned.split('\n')

            for line in potential_lines:
                line = line.strip()
                # Ignorer les lignes vides ou les marqueurs de code
                if not line or line == '```':
                    continue
                # Supprimer les commentaires
                if '#' in line:
                    line = line.split('#', 1)[0].strip()
                # Ajouter seulement si la ligne n'est pas vide apr√®s nettoyage
                if line:
                    structure_lines.append(line)
            
            process_state['project_structure'] = structure_lines
            update_progress(2, "‚úÖ Structure du projet d√©finie avec succ√®s.", 55)
        else:
            update_progress(2, "‚ö†Ô∏è Format de r√©ponse inattendu pour la structure.", 55)
            return False
    else:
        update_progress(2, "‚ùå √âchec de la d√©finition de la structure.", 55)
        return False

    # == √âTAPE 3: Cr√©ation de la Structure de Fichiers/Dossiers ==`
    update_progress(3, f"Cr√©ation des dossiers et fichiers dans '{target_directory}'...", 60)
    created_paths = create_project_structure(target_directory, structure_lines)

    if created_paths is not None:
        update_progress(3, f"‚úÖ Structure cr√©√©e dans '{target_directory}'.", 65)

        # == √âTAPE 4: G√©n√©ration de Code ==`
        update_progress(4, "G√©n√©ration du code complet...", 70)
        
        # V√©rifier la limite de taux pour les mod√®les gratuits
        if is_free_model(selected_model):
            current_time = time.time()
            last_api_call_time = process_state.get('last_api_call_time', 0)
            time_since_last_call = current_time - last_api_call_time
            if time_since_last_call < RATE_LIMIT_DELAY_SECONDS:
                wait_time = RATE_LIMIT_DELAY_SECONDS - time_since_last_call
                update_progress(4, f"‚è≥ Mod√®le gratuit d√©tect√©. Attente de {wait_time:.1f} secondes (limite de taux)...", 70)
                time.sleep(wait_time)

        # --- Ajout d'instructions d'animation ---`
        animation_instruction = ""
        if include_animations and not prompt_mentions_design(user_prompt):
            animation_instruction = (
                "\n7. **Animation & Fluidit√©:** Puisqu'aucun design sp√©cifique n'a √©t√© demand√©, "
                "veuillez incorporer des animations CSS subtiles et des transitions (par exemple, effets hover, chargement/transitions fluides des sections, retour d'information subtil des boutons) "
                "pour rendre l'interface utilisateur moderne, fluide et attrayante. Privil√©giez l'utilisabilit√© et √©vitez les animations trop distrayantes."
            )
            update_progress(4, "‚ÑπÔ∏è Aucune instruction de design d√©tect√©e, ajout d'une demande d'animations fluides.", 75)
        
        # Ajouter les r√©sultats des outils si disponibles
        tool_results_text = ""
        if use_mcp_tools and process_state.get('tool_results'):
            tool_results_text = "\n**R√©sultats des Outils:** Les informations suivantes ont √©t√© recueillies pour aider au d√©veloppement:\n"
            for tool_name, tool_info in process_state['tool_results'].items():
                tool_results_text += f"\n- **{tool_name}**: {json.dumps(tool_info.get('args', {}))}\n"
                if 'result' in tool_info:
                    tool_results_text += f"R√©sultat: {tool_info['result'][:500]}...\n"
        
        # Contexte des URLs pour la g√©n√©ration de code
        url_reference = ""
        if process_state.get('url_contents'):
            url_reference = "\n**URLs fournies:** Veuillez vous r√©f√©rer aux URLs fournies par l'utilisateur comme source d'inspiration ou documentation. Suivez autant que possible les exemples ou la documentation fournie dans ces URLs."
        
        # Construction du prompt pour la g√©n√©ration de code avec les r√©sultats des outils MCP
        prompt_code_gen = f"""
        G√©n√©rez le code *complet* de l'application bas√© sur le prompt et la structure ci-dessous.

        **Prompt D√©taill√©:**
        {reformulated_prompt}
        
        {tool_results_text if tool_results_text else ""}
        
        {url_reference if url_reference else ""}
        
        {url_context if url_context else ""}

        **Structure du Projet (uniquement pour r√©f√©rence):**
        ```
        {chr(10).join(structure_lines)}
        ```

        **Instructions:**
        1. Fournissez le code complet pour *tous* les fichiers list√©s dans la structure.
        2. Utilisez le format EXACT `--- FILE: chemin/vers/nomfichier ---` sur une ligne par lui-m√™me avant chaque bloc de code de fichier. Commencez la r√©ponse *imm√©diatement* avec le premier marqueur. Aucun texte d'introduction.
        3. Assurez-vous que le code est fonctionnel, inclut les imports, la gestion des erreurs de base et des commentaires.
        4. Pour `requirements.txt` ou similaire, listez les d√©pendances.
        5. Pour `README.md`, fournissez des instructions de configuration/ex√©cution.
        6. Si le code d√©passe les limites de jetons, terminez la r√©ponse *enti√®re* *exactement* avec: `GENERATION_INCOMPLETE` (aucun autre texte apr√®s).{animation_instruction}
        
        IMPORTANT: SI un style, template ou documentation est fourni dans les URLs, utilisez-les comme r√©f√©rence primaire.

        G√©n√©rez le code maintenant:
        """
        messages_code_gen = [{"role": "user", "content": prompt_code_gen}]

        # Utiliser des outils pour la g√©n√©ration de code si activ√©s
        if use_mcp_tools:
            response_code_gen = call_openrouter_api(
                api_key, 
                selected_model, 
                messages_code_gen, 
                temperature=0.4, 
                max_retries=2,
                tools=get_default_tools()
            )
        else:
            # Utiliser une temp√©rature plus basse pour la g√©n√©ration de code sans outils
            response_code_gen = call_openrouter_api(
                api_key, 
                selected_model, 
                messages_code_gen, 
                temperature=0.4, 
                max_retries=2
            )
        process_state['last_api_call_time'] = time.time()

        if response_code_gen and response_code_gen.get("choices"):
            code_response_text = response_code_gen["choices"][0]["message"]["content"]
            
            # V√©rifier les appels d'outils
            if use_mcp_tools and response_code_gen["choices"][0]["message"].get("tool_calls") and mcp_client:
                update_progress(4, "üîç L'IA utilise des outils pour am√©liorer la g√©n√©ration de code...", 80)
                
                # Traiter chaque appel d'outil
                tool_calls = response_code_gen["choices"][0]["message"]["tool_calls"]
                for tool_call in tool_calls:
                    function_info = tool_call.get("function", {})
                    tool_name = function_info.get("name")
                    tool_args_str = function_info.get("arguments", "{}")
                    
                    try:
                        tool_args = json.loads(tool_args_str)
                        
                        # Ex√©cuter l'outil via le client MCP
                        tool_query = f"Ex√©cuter {tool_name} avec {tool_args}"
                        tool_result = asyncio.run(run_mcp_query(mcp_client, tool_query))
                        
                        if tool_result:
                            # Stocker les r√©sultats des outils
                            if 'tool_results' not in process_state:
                                process_state['tool_results'] = {}
                            
                            process_state['tool_results'][tool_name] = {
                                "args": tool_args,
                                "result": tool_result.get("text", "")
                            }
                            
                            # Construire un prompt de suivi avec les r√©sultats de l'outil
                            processed_result = handle_tool_results(tool_name, tool_result.get("text", ""))
                            
                            follow_up_prompt = f"""
                            J'ai utilis√© {tool_name} pour recueillir des informations suppl√©mentaires pour la g√©n√©ration de code.
                            
                            L'outil a retourn√© ces informations:
                            
                            {processed_result}
                            
                            Veuillez utiliser ces informations suppl√©mentaires pour am√©liorer la g√©n√©ration de code.
                            Continuez √† g√©n√©rer le code en utilisant le m√™me format:
                            `--- FILE: chemin/vers/nomfichier ---`
                            
                            Et n'oubliez pas d'inclure tous les fichiers de la structure.
                            """
                            
                            # Faire un autre appel API avec le prompt de suivi
                            follow_up_messages = messages_code_gen + [
                                {"role": "assistant", "content": code_response_text},
                                {"role": "user", "content": follow_up_prompt}
                            ]
                            
                            update_progress(4, f"üîç Utilisation des informations de {tool_name} pour am√©liorer le code...", 85)
                            
                            # V√©rifier la limite de taux
                            if is_free_model(selected_model):
                                current_time = time.time()
                                time_since_last_call = time.time() - process_state.get('last_api_call_time', 0)
                                if time_since_last_call < RATE_LIMIT_DELAY_SECONDS:
                                    wait_time = RATE_LIMIT_DELAY_SECONDS - time_since_last_call
                                    update_progress(4, f"‚è≥ Attente de {wait_time:.1f}s avant de continuer...", 85)
                                    time.sleep(wait_time)
                            
                            # Faire l'appel de suivi
                            follow_up_response = call_openrouter_api(
                                api_key, 
                                selected_model, 
                                follow_up_messages, 
                                temperature=0.4
                            )
                            process_state['last_api_call_time'] = time.time()
                            
                            if follow_up_response and follow_up_response.get("choices"):
                                # Mettre √† jour la r√©ponse de code avec la version am√©lior√©e
                                enhanced_code = follow_up_response["choices"][0]["message"]["content"]
                                code_response_text = enhanced_code
                    except Exception as e:
                        logging.warning(f"Erreur lors du traitement de l'outil {tool_name}: {e}")
            elif not use_mcp_tools and response_code_gen["choices"][0]["message"].get("tool_calls"):
                # Avertir que des outils ont √©t√© demand√©s mais sont d√©sactiv√©s
                update_progress(4, "‚ö†Ô∏è Le mod√®le a demand√© des outils, mais les outils MCP sont d√©sactiv√©s. Les appels d'outils seront ignor√©s.", 80)
            
            process_state['last_code_generation_response'] = code_response_text
            update_progress(4, "‚úÖ R√©ponse de g√©n√©ration de code re√ßue.", 90)

            # == √âTAPE 5: √âcriture du Code dans les Fichiers ==`
            update_progress(5, "√âcriture du code dans les fichiers...", 90)
            files_written = []
            errors = []
            generation_incomplete = False
            
            files_written, errors, generation_incomplete = parse_and_write_code(target_directory, code_response_text)

            if files_written or errors:
                update_progress(5, "‚úÖ Traitement de la r√©ponse termin√©.", 95)
                
                # Journaliser les r√©sultats
                for f in files_written:
                    logging.info(f"üìÑ Fichier √©crit: {Path(f).relative_to(Path(target_directory))}")
                for err in errors:
                    logging.error(f"‚ùå {err}")

                # == √âTAPE 6: V√©rifier les Fichiers Vides et G√©n√©rer le Code Manquant ==`
                if not errors and (files_written or generation_incomplete):
                    update_progress(6, "V√©rification des fichiers vides...", 95)
                    
                    empty_files = identify_empty_files(target_directory, structure_lines)
                    
                    if empty_files:
                        update_progress(6, f"Trouv√© {len(empty_files)} fichiers vides qui n√©cessitent une g√©n√©ration de code.", 95)
                        
                        # V√©rifier la limite de taux avant d'appeler l'API √† nouveau
                        if is_free_model(selected_model):
                            current_time = time.time()
                            time_since_last_call = time.time() - process_state.get('last_api_call_time', 0)
                            if time_since_last_call < RATE_LIMIT_DELAY_SECONDS:
                                wait_time = RATE_LIMIT_DELAY_SECONDS - time_since_last_call
                                update_progress(6, f"‚è≥ Mod√®le gratuit d√©tect√©. Attente de {wait_time:.1f} secondes avant de g√©n√©rer le code manquant...", 95)
                                time.sleep(wait_time)
                        
                        update_progress(6, "G√©n√©ration de code pour les fichiers vides...", 97)
                        additional_files, additional_errors = generate_missing_code(
                            api_key, 
                            selected_model, 
                            empty_files, 
                            reformulated_prompt, 
                            structure_lines,
                            code_response_text,
                            target_directory
                        )
                        process_state['last_api_call_time'] = time.time()
                        
                        if additional_files:
                            update_progress(6, f"‚úÖ G√©n√©ration r√©ussie de code pour {len(additional_files)} fichiers vides.", 98)
                            # Ajouter √† la liste principale de fichiers
                            files_written.extend(additional_files)
                        
                        if additional_errors:
                            for err in additional_errors:
                                logging.error(f"‚ùå {err}")
                            # Ajouter √† la liste principale d'erreurs
                            errors.extend(additional_errors)
                    else:
                        update_progress(6, "‚úÖ Aucun fichier vide trouv√© - tous les fichiers contiennent du code.", 98)
                
                # Message de succ√®s final
                if not errors:
                    update_progress(7, "üéâ Application g√©n√©r√©e avec succ√®s!", 100)
                    
                    # Sauvegarder le chemin pour le mode pr√©visualisation si on est dans un contexte Flask
                    if current_app:
                        current_app.config['last_generated_app_path'] = target_directory
                    
                    return True
                else:
                    update_progress(7, f"‚ö†Ô∏è Application g√©n√©r√©e avec {len(errors)} erreurs.", 100)
                    return len(files_written) > 0
            else:
                update_progress(5, "‚ùå √âchec de l'√©criture des fichiers.", 100)
                return False
        else:
            update_progress(4, "‚ùå √âchec de la g√©n√©ration de code.", 100)
            return False
    else:
        update_progress(3, "‚ùå √âchec de la cr√©ation de la structure.", 100)
        return False


