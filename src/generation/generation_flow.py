"""
Module de gestion du processus de g√©n√©ration d'applications.
Contient les √©tapes et la logique de g√©n√©ration d'applications.
"""
import time
import asyncio
import json
import logging
import re
from pathlib import Path
from flask import session

from src.config.constants import RATE_LIMIT_DELAY_SECONDS
from src.utils.model_utils import is_free_model
from src.api.openrouter_api import call_openrouter_api
from src.utils.file_utils import (
    parse_structure_and_prompt, 
    create_project_structure,
    parse_and_write_code,
    identify_empty_files,
    generate_missing_code
)
from src.utils.prompt_utils import (
    prompt_mentions_design,
    extract_urls_from_prompt,
    process_urls
)
from src.mcp.tool_utils import get_default_tools
from src.mcp.handlers import handle_tool_results
from src.generation.steps.reformulate_prompt import reformulate_prompt
from src.generation.steps.define_project_structure import define_project_structure
from src.generation.steps.generate_code_step import generate_code_step
from src.generation.steps.add_used_tool import add_used_tool
from src.generation.steps.update_progress import update_progress
from src.generation.steps.run_mcp_query import run_mcp_query

def generate_application(api_key, selected_model, user_prompt, target_directory, use_mcp_tools=True, frontend_framework="Auto-detect", include_animations=True, progress_callback=None):
    """
    G√©n√®re une application compl√®te bas√©e sur la description de l'utilisateur.
    
    Args:
        api_key (str): Cl√© API OpenRouter
        selected_model (str): Mod√®le d'IA s√©lectionn√©
        user_prompt (str): Description de l'application souhait√©e
        target_directory (str): R√©pertoire de destination
        use_mcp_tools (bool, optional): Utiliser les outils MCP pour am√©liorer la g√©n√©ration
        frontend_framework (str, optional): Framework frontend pr√©f√©r√©
        include_animations (bool, optional): Inclure des animations CSS
        progress_callback (function, optional): Fonction pour mettre √† jour la progression
        
    Returns:
        bool: True si la g√©n√©ration a r√©ussi, False sinon
    """
    from flask import current_app

    # Variables locales au lieu d'utiliser la session Flask
    process_state = {
        'process_running': True,
        'last_code_generation_response': "",
        'reformulated_prompt': "",
        'project_structure': [],
        'tool_results': {},
        'url_contents': {},
        'last_api_call_time': 0,
        'used_tools_details': []  # Initialiser la liste pour suivre les outils utilis√©s
    }

    # Initialiser le client MCP si les outils sont activ√©s
    mcp_client = None
    if use_mcp_tools:
        from src.mcp.clients import SimpleMCPClient
        mcp_client = SimpleMCPClient(api_key, selected_model)
        update_progress(0, "üîå Outils MCP activ√©s: Recherche web, documentation, et composants frontend disponibles.", progress_callback)

    # == √âTAPE 0: Extraction et traitement des URLs du prompt ==
    update_progress(0, "Extraction des URLs du prompt...", 5, progress_callback)
    urls = extract_urls_from_prompt(user_prompt)
    url_context = ""
    
    if urls:
        update_progress(0, f"üîó URLs d√©tect√©es dans votre demande: {len(urls)} URL(s)", 10, progress_callback)
        try:
            url_contents = asyncio.run(process_urls(urls))
            process_state['url_contents'] = url_contents
            
            # Pr√©parer le contexte des URLs
            url_context = "\n\n### CONTENU DES URLS FOURNIES ###\n"
            for url, content in url_contents.items():
                truncated_content = content[:5000] + "..." if len(content) > 5000 else content
                url_context += f"\nURL: {url}\n```\n{truncated_content}\n```\n"
            
            update_progress(0, f"‚úÖ Contenu r√©cup√©r√© pour {len(url_contents)} URL(s)", 15, progress_callback)
        except Exception as e:
            update_progress(0, f"‚ùå Erreur lors de la r√©cup√©ration des URLs: {e}", 15, progress_callback)
            # Continuer m√™me en cas d'erreur

    # == √âTAPE 1: Reformulation du prompt ==
    update_progress(1, "Reformulation du prompt...", 20, progress_callback)
    additional_context = ""
    tool_results_text = ""
    url_reference = ""
    animation_instruction = ""
    reformulated_prompt = reformulate_prompt(
        api_key,
        selected_model,
        user_prompt,
        url_context,
        additional_context,
        progress_callback=progress_callback,
        current_app=current_app,
        process_state=process_state
    )
    if not reformulated_prompt:
        update_progress(1, "‚ùå √âchec de la reformulation du prompt.", 40, progress_callback)
        return False

    # == √âTAPE 2: D√©finition de la structure ==
    update_progress(2, "D√©finition de la structure du projet...", 45, progress_callback)
    structure_lines = define_project_structure(
        api_key,
        selected_model,
        reformulated_prompt,
        url_context,
        progress_callback=progress_callback,
        process_state=process_state
    )
    if not structure_lines:
        return False

    # == √âTAPE 3: Cr√©ation de la Structure de Fichiers/Dossiers ==
    update_progress(3, f"Cr√©ation des dossiers et fichiers dans '{target_directory}'...", 60, progress_callback)
    created_paths = create_project_structure(target_directory, structure_lines)

    if created_paths is not None:
        update_progress(3, f"‚úÖ Structure cr√©√©e dans '{target_directory}'.", 65, progress_callback)

        # == √âTAPE 4: G√©n√©ration de Code ==
        if include_animations and not prompt_mentions_design(user_prompt):
            animation_instruction = (
                "\n7. **Animation & Fluidit√©:** Puisqu'aucun design sp√©cifique n'a √©t√© demand√©, "
                "veuillez incorporer des animations CSS subtiles et des transitions (par exemple, effets hover, chargement/transitions fluides des sections, retour d'information subtil des boutons) "
                "pour rendre l'interface utilisateur moderne, fluide et attrayante. Privil√©giez l'utilisabilit√© et √©vitez les animations trop distrayantes."
            )
            update_progress(4, "‚ÑπÔ∏è Aucune instruction de design d√©tect√©e, ajout d'une demande d'animations fluides.", 75, progress_callback)
        if use_mcp_tools and process_state.get('tool_results'):
            tool_results_text = "\n**R√©sultats des Outils:** Les informations suivantes ont √©t√© recueillies pour aider au d√©veloppement:\n"
            for tool_name, tool_info in process_state['tool_results'].items():
                tool_results_text += f"\n- **{tool_name}**: {json.dumps(tool_info.get('args', {}))}\n"
                if 'result' in tool_info:
                    tool_results_text += f"R√©sultat: {tool_info['result'][:500]}...\n"
        if process_state.get('url_contents'):
            url_reference = "\n**URLs fournies:** Veuillez vous r√©f√©rer aux URLs fournies par l'utilisateur comme source d'inspiration ou documentation. Suivez autant que possible les exemples ou la documentation fournie dans ces URLs."
        update_progress(4, "G√©n√©ration du code complet...", 70, progress_callback)
        response_code_gen = generate_code_step(
            api_key,
            selected_model,
            reformulated_prompt,
            structure_lines,
            url_context,
            tool_results_text,
            url_reference,
            animation_instruction,
            use_mcp_tools,
            mcp_client,
            user_prompt,
            progress_callback=progress_callback,
            process_state=process_state
        )
        process_state['last_api_call_time'] = time.time()

        if response_code_gen and response_code_gen.get("choices"):
            code_response_text = response_code_gen["choices"][0]["message"]["content"]
            
            # V√©rifier les appels d'outils
            if use_mcp_tools and response_code_gen["choices"][0]["message"].get("tool_calls") and mcp_client:
                update_progress(4, "üîç L'IA utilise des outils pour am√©liorer la g√©n√©ration de code...", 80, progress_callback)
                
                tool_calls = response_code_gen["choices"][0]["message"]["tool_calls"]
                for tool_call in tool_calls:
                    function_info = tool_call.get("function", {})
                    tool_name = function_info.get("name")
                    tool_args_str = function_info.get("arguments", "{}")

                    if not tool_name: continue  # Ignorer si le nom de l'outil est manquant

                    try:
                        tool_args = json.loads(tool_args_str)

                        # Ex√©cuter l'outil via le client MCP
                        tool_query = f"Ex√©cuter {tool_name} avec {tool_args}"
                        tool_result = asyncio.run(run_mcp_query(mcp_client, tool_query))

                        if tool_result:
                            tool_result_text = tool_result.get("text", "")
                            extracted_details = None

                            # Extraire les URLs si c'est Web Search
                            if tool_name == 'Web Search':
                                # Regex simple pour trouver les URLs
                                urls_found = re.findall(r'https?://[^\s"\']+', tool_result_text)
                                extracted_details = list(set(urls_found))  # Liste unique d'URLs

                            # Enregistrer l'outil et ses d√©tails (URLs pour Web Search)
                            add_used_tool(process_state, tool_name, extracted_details)

                            # Stocker les r√©sultats bruts (peut √™tre utile pour le d√©bogage)
                            if 'tool_results' not in process_state:
                                process_state['tool_results'] = {}
                            process_state['tool_results'][tool_name] = {
                                "args": tool_args,
                                "result": tool_result_text  # Stocker le texte brut du r√©sultat
                            }

                            # Construire un prompt de suivi avec les r√©sultats de l'outil
                            processed_result = handle_tool_results(tool_name, tool_result_text)
                            # ... (le reste du traitement du r√©sultat de l'outil et appel de suivi) ...

                    except Exception as e:
                        logging.warning(f"Erreur lors du traitement de l'outil {tool_name}: {e}")
                        add_used_tool(process_state, tool_name, {'error': str(e)})  # Enregistrer l'outil m√™me en cas d'erreur

            process_state['last_code_generation_response'] = code_response_text
            update_progress(4, "‚úÖ R√©ponse de g√©n√©ration de code re√ßue.", 90, progress_callback)

            # == √âTAPE 5: √âcriture du Code dans les Fichiers ==
            update_progress(5, "√âcriture du code dans les fichiers...", 90, progress_callback)
            files_written = []
            errors = []
            generation_incomplete = False
            
            files_written, errors, generation_incomplete = parse_and_write_code(target_directory, code_response_text)

            if files_written or errors:
                update_progress(5, "‚úÖ Traitement de la r√©ponse termin√©.", 95, progress_callback)
                
                # Journaliser les r√©sultats
                for f in files_written:
                    logging.info(f"üìÑ Fichier √©crit: {Path(f).relative_to(Path(target_directory))}")
                for err in errors:
                    logging.error(f"‚ùå {err}")

                # == √âTAPE 6: V√©rifier les Fichiers Vides et G√©n√©rer le Code Manquant ==
                if not errors and (files_written or generation_incomplete):
                    update_progress(6, "V√©rification des fichiers vides...", 95, progress_callback)
                    
                    empty_files = identify_empty_files(target_directory, structure_lines)
                    
                    if empty_files:
                        update_progress(6, f"Trouv√© {len(empty_files)} fichiers vides qui n√©cessitent une g√©n√©ration de code.", 95, progress_callback)
                        
                        # V√©rifier la limite de taux avant d'appeler l'API √† nouveau
                        if is_free_model(selected_model):
                            current_time = time.time()
                            time_since_last_call = time.time() - process_state.get('last_api_call_time', 0)
                            if time_since_last_call < RATE_LIMIT_DELAY_SECONDS:
                                wait_time = RATE_LIMIT_DELAY_SECONDS - time_since_last_call
                                update_progress(6, f"‚è≥ Mod√®le gratuit d√©tect√©. Attente de {wait_time:.1f} secondes avant de g√©n√©rer le code manquant...", 95, progress_callback)
                                time.sleep(wait_time)
                        
                        update_progress(6, "G√©n√©ration de code pour les fichiers vides...", 97, progress_callback)
                        additional_files, additional_errors = generate_missing_code(
                            api_key, 
                            selected_model, 
                            empty_files, 
                            reformulated_prompt, 
                            structure_lines,
                            code_response_text,
                            target_directory
                        )
                        process_state['last_api_call_time'] = time.time()
                        
                        if additional_files:
                            update_progress(6, f"‚úÖ G√©n√©ration r√©ussie de code pour {len(additional_files)} fichiers vides.", 98, progress_callback)
                            # Ajouter √† la liste principale de fichiers
                            files_written.extend(additional_files)
                        
                        if additional_errors:
                            for err in additional_errors:
                                logging.error(f"‚ùå {err}")
                            # Ajouter √† la liste principale d'erreurs
                            errors.extend(additional_errors)
                    else:
                        update_progress(6, "‚úÖ Aucun fichier vide trouv√© - tous les fichiers contiennent du code.", 98, progress_callback)
                
                # Message de succ√®s final
                if not errors:
                    update_progress(7, "üéâ Application g√©n√©r√©e avec succ√®s!", 100, progress_callback)
                    
                    # Sauvegarder le chemin pour le mode pr√©visualisation si on est dans un contexte Flask
                    if current_app:
                        current_app.config['last_generated_app_path'] = target_directory
                        current_app.config['used_tools_details'] = process_state.get('used_tools_details', [])
                    
                    return True
                else:
                    update_progress(7, f"‚ö†Ô∏è Application g√©n√©r√©e avec {len(errors)} erreurs.", 100, progress_callback)
                    if current_app:
                        current_app.config['used_tools_details'] = process_state.get('used_tools_details', [])
                    return len(files_written) > 0
            else:
                update_progress(5, "‚ùå √âchec de l'√©criture des fichiers.", 100, progress_callback)
                if current_app:
                    current_app.config['used_tools_details'] = process_state.get('used_tools_details', [])
                return False
        else:
            update_progress(4, "‚ùå √âchec de la g√©n√©ration de code.", 100, progress_callback)
            if current_app:
                current_app.config['used_tools_details'] = process_state.get('used_tools_details', [])
            return False
    else:
        update_progress(3, "‚ùå √âchec de la cr√©ation de la structure.", 100, progress_callback)
        if current_app:
            current_app.config['used_tools_details'] = process_state.get('used_tools_details', [])
        return False


