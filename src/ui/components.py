# Copyright (C) 2025 Perey Alex
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>

"""
UI components for the Streamlit application.
Contains functions for rendering different parts of the UI.
"""


from src.config.constants import DEFAULT_MODEL, RATE_LIMIT_DELAY_SECONDS
from src.utils.env_utils import get_openrouter_api_key

def setup_page_config():
    """Set up the Streamlit page configuration."""
    st.set_page_config(layout="wide", page_title="CodeGen App")
    st.title("AI Web Application Generator")
    st.markdown("Describe your application, provide a path, and let AI generate the code!")

def render_sidebar():
    """
    Render the sidebar configuration UI.
    
    Returns:
        tuple: (api_key, selected_model)
    """
    # Get API key from environment variable if available
    env_api_key = get_openrouter_api_key()
    api_key_help = "Your OpenRouter API key. It will not be stored."
    
    if env_api_key:
        api_key_help += " (Pre-filled from .env file)"
    
    with st.sidebar:
        st.header("‚öôÔ∏è Configuration")
        api_key = st.text_input(
            "OpenRouter API Key", 
            value=env_api_key,
            type="password", 
            help=api_key_help
        )
        
        selected_model = st.text_input(
            "OpenRouter Model", 
            value=DEFAULT_MODEL, 
            help=f"Ex: {DEFAULT_MODEL}, meta-llama/llama-3-70b-instruct, etc."
        )
        
        if env_api_key:
            st.success("‚úÖ API key detected in .env file")
            
        st.caption(f"Uses OpenRouter API. {RATE_LIMIT_DELAY_SECONDS}s delay applied if ':free' model or Gemini Flash detected.")
    
    return api_key, selected_model

def render_input_columns():
    """
    Render the main input columns for user prompt and target directory.
    
    Returns:
        tuple: (user_prompt, target_directory)
    """
    col1, col2 = st.columns(2)
    
    with col1:
        st.header("1. Describe your application")
        user_prompt = st.text_area(
            "Initial prompt:",
            height=200,
            placeholder="Example: Create a simple TODO list application in Flask with an SQLite database. The user should be able to add, view, and delete tasks."
        )
    
    with col2:
        st.header("2. Where to generate the project?")
        target_directory = st.text_input(
            "Destination folder path:",
            placeholder="Ex: C:\\Users\\YourName\\Projects\\MyGeneratedApp",
            help="The absolute path to an existing folder where the project will be created."
        )
        st.info("Make sure the folder exists and you have write permissions.", icon="üìÅ")
    
    return user_prompt, target_directory

def show_response_expander():
    """Show an expander with the last generated code (for debugging)."""
    if st.session_state.get('last_code_generation_response', ''):
        st.markdown("---")
        with st.expander("View last raw code generated by AI (Step 3)", expanded=False):
            st.code(st.session_state.last_code_generation_response, language='markdown')
