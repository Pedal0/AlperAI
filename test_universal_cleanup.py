#!/usr/bin/env python3
"""
Test du syst√®me de nettoyage universel des marqueurs Markdown.
V√©rifie que tous les langages sont correctement d√©tect√©s et nettoy√©s.
"""
import tempfile
import os
from pathlib import Path
from src.mcp.simple_validation_system import clean_markdown_artifacts

def test_universal_cleanup():
    """Test le nettoyage universel sur diff√©rents langages."""
    
    # Cr√©er un r√©pertoire temporaire de test
    with tempfile.TemporaryDirectory() as temp_dir:
        test_path = Path(temp_dir)
        
        # Fichiers de test avec diff√©rents langages et marqueurs probl√©matiques
        test_files = {
            'test.js': '''```javascript
console.log("Hello World");
function test() {
    return true;
}
```''',
            'test.py': '''```python
def hello():
    print("Hello World")
    return True
```''',
            'test.html': '''```html
<!DOCTYPE html>
<html>
<head><title>Test</title></head>
<body><h1>Hello</h1></body>
</html>
```''',
            'test.css': '''```css
body {
    margin: 0;
    padding: 0;
}
```''',
            'test.tsx': '''```typescript
interface Props {
    name: string;
}
const Component: React.FC<Props> = ({ name }) => {
    return <div>Hello {name}</div>;
};
```''',
            'test.php': '''```php
<?php
function hello($name) {
    return "Hello " . $name;
}
?>
```''',
            'test.go': '''```go
package main

import "fmt"

func main() {
    fmt.Println("Hello World")
}
```''',
            'test.rs': '''```rust
fn main() {
    println!("Hello World");
}
```''',
            'unknown.xyz': '''```unknown-language
This is some code in an unknown language
that should still be cleaned
```''',
            'config.yaml': '''```yaml
version: "3.8"
services:
  web:
    image: nginx
```''',
        }
        
        # Cr√©er les fichiers avec marqueurs
        for filename, content in test_files.items():
            file_path = test_path / filename
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
        
        print(f"üìÅ Fichiers de test cr√©√©s dans: {temp_dir}")
        print("üßπ Lancement du nettoyage universel...")
        
        # Lancer le nettoyage
        cleaned_count = clean_markdown_artifacts(temp_dir)
        
        print(f"‚úÖ {cleaned_count} fichiers nettoy√©s")
        
        # V√©rifier les r√©sultats
        success_count = 0
        for filename in test_files.keys():
            file_path = test_path / filename
            with open(file_path, 'r', encoding='utf-8') as f:
                cleaned_content = f.read()
            
            # V√©rifier qu'il n'y a plus de marqueurs
            if not cleaned_content.startswith('```') and not cleaned_content.endswith('```'):
                print(f"‚úÖ {filename}: Nettoy√© correctement")
                success_count += 1
            else:
                print(f"‚ùå {filename}: Marqueurs encore pr√©sents!")
                print(f"   Contenu: {cleaned_content[:50]}...")
        
        print(f"\nüéØ R√©sultat: {success_count}/{len(test_files)} fichiers correctement nettoy√©s")
        
        if success_count == len(test_files):
            print("üöÄ SUCC√àS: Le nettoyage universel fonctionne parfaitement!")
            return True
        else:
            print("‚ö†Ô∏è √âCHEC: Certains fichiers n'ont pas √©t√© nettoy√©s correctement")
            return False

if __name__ == "__main__":
    print("üß™ Test du syst√®me de nettoyage universel des marqueurs Markdown")
    print("=" * 60)
    test_universal_cleanup()
